---
Language:        Cpp
# BasedOnStyle:  Google

# The extra indent or outdent of access modifiers, e.g. public:.
# It adds ContinuationIndentWidth should be 0.
AccessModifierOffset: -4

# If true, horizontally aligns arguments after an open bracket.
# This applies to round brackets (parentheses), angle brackets and square brackets.
# Possible values:
#    BAS_Align (in configuration: Align) Align parameters on the open bracket, e.g.:
# someLongFunction(argument1,
#                  argument2);
#
#    BAS_DontAlign (in configuration: DontAlign) Don’t align, instead use ContinuationIndentWidth,
#    e.g.:
# someLongFunction(argument1,
#     argument2);
#
#    BAS_AlwaysBreak (in configuration: AlwaysBreak) Always break after an open bracket, if the
#    parameters don’t fit on a single line, e.g.:a
# someLongFunction(
#     argument1, argument2);
#  
AlignAfterOpenBracket: Align

# If true, aligns consecutive assignments.
# This will align the assignment operators of consecutive lines. This will result in formattings
# like, 
#
# int aaaa = 12;
# int b    = 23;
# int ccc  = 23;
#
AlignConsecutiveAssignments: false

# If true, aligns consecutive declarations.
# This will align the declaration names of consecutive lines. This will result in formattings like,
#
# int         aaaa = 12;
# float       b = 23;
# std::string ccc = 23;
#
AlignConsecutiveDeclarations: false

# If true, aligns escaped newlines as far left as possible. Otherwise puts them into the right-most
# column.
# v6.0 AlignEscapedNewlines: Left

# If true, horizontally align operands of binary and ternary expressions.
# Specifically, this aligns operands of a single expression that needs to be split over multiple
# lines, e.g.:
# int aaa = bbbbbbbbbbbbbbb +
#           ccccccccccccccc;
AlignOperands:   true

# If true, aligns trailing comments.
AlignTrailingComments: true

# Allow putting all parameters of a function declaration onto the next line even if
# BinPackParameters is false.
AllowAllParametersOfDeclarationOnNextLine: true

# Allows contracting simple braced statements to a single line.
# E.g., this allows if (a) { return; } to be put on a single line.
AllowShortBlocksOnASingleLine: false

# If true, short case labels will be contracted to a single line.
AllowShortCaseLabelsOnASingleLine: false

# Dependent on the value, int f() { return 0; } can be put on a single line.
# Possible values:
#    SFS_None (in configuration: None) Never merge functions into a single line.
#    SFS_Empty (in configuration: Empty) Only merge empty functions.
#    SFS_Inline (in configuration: Inline) Only merge functions defined inside a class. Implies
#    “empty”.
#    SFS_All (in configuration: All) Merge all functions fitting on a single line.
AllowShortFunctionsOnASingleLine: All

# If true, if (a) return; can be put on a single line.
AllowShortIfStatementsOnASingleLine: true

# If true, while (true) continue; can be put on a single line.
AllowShortLoopsOnASingleLine: true

# The function definition return type breaking style to use. This option is deprecated and is
# retained for backwards compatibility.
# Possible values:
#    DRTBS_None (in configuration: None) Break after return type automatically.
#    PenaltyReturnTypeOnItsOwnLine is taken into account.
#    DRTBS_All (in configuration: All) Always break after the return type.
#    DRTBS_TopLevel (in configuration: TopLevel) Always break after the return types of top-level
#    functions.
AlwaysBreakAfterDefinitionReturnType: None

# The function declaration return type breaking style to use.
# Possible values:
#    RTBS_None (in configuration: None) Break after return type automatically.
#    PenaltyReturnTypeOnItsOwnLine is taken into account.
#    RTBS_All (in configuration: All) Always break after the return type.
#    RTBS_TopLevel (in configuration: TopLevel) Always break after the return types of top-level
#    functions.
#    RTBS_AllDefinitions (in configuration: AllDefinitions) Always break after the return type of
#    function definitions.
#    RTBS_TopLevelDefinitions (in configuration: TopLevelDefinitions) Always break after the return
#    type of top-level definitions.
AlwaysBreakAfterReturnType: None

# If true, always break before multiline string literals.
# This flag is mean to make cases where there are multiple multiline strings in a file look more
# consistent. Thus, it will only take effect if wrapping the string at that point leads to it being
# indented ContinuationIndentWidth spaces from the start of the line.
AlwaysBreakBeforeMultilineStrings: true

# If true, always break after the template<...> of a template declaration.
AlwaysBreakTemplateDeclarations: true

# If false, a function call’s arguments will either be all on the same line or will have one line
# each.
BinPackArguments: true


# If false, a function declaration’s or function definition’s parameters will either all be on the
# same line or will have one line each.
BinPackParameters: true

# Control of individual brace wrapping cases.
# If BreakBeforeBraces is set to BS_Custom, use this to specify how each individual brace case
# should be handled. Otherwise, this is ignored.
# Nested configuration flags:
#     
#    bool AfterClass Wrap class definitions.
#    bool AfterControlStatement Wrap control statements (if/for/while/switch/..).
#    bool AfterEnum Wrap enum definitions.
#    bool AfterFunction Wrap function definitions.
#    bool AfterNamespace Wrap namespace definitions.
#    bool AfterObjCDeclaration Wrap ObjC definitions (@autoreleasepool, interfaces, ..).
#    bool AfterStruct Wrap struct definitions.
#    bool AfterUnion Wrap union definitions.
#    bool BeforeCatch Wrap before catch.
#    bool BeforeElse Wrap before else.
#    bool IndentBraces Indent the wrapped braces themselves.
BraceWrapping:   
  AfterClass:      false
  AfterControlStatement: false
  AfterEnum:       false
  AfterFunction:   false
  AfterNamespace:  false
  AfterObjCDeclaration: false
  AfterStruct:     false
  AfterUnion:      false
# v6.0 AfterExternBlock: false
  BeforeCatch:     false
  BeforeElse:      false
  IndentBraces:    false
# v6.0 SplitEmptyFunction: true
# v6.0 SplitEmptyRecord: true
# v6.0 SplitEmptyNamespace: true

# The way to wrap binary operators.
# Possible values:
#    BOS_None (in configuration: None) Break after operators.
#    BOS_NonAssignment (in configuration: NonAssignment) Break before operators that aren’t assignments.
#    BOS_All (in configuration: All) Break before operators.
# It should be None.
BreakBeforeBinaryOperators: None

# The brace breaking style to use.
# Possible values:
#    BS_Attach (in configuration: Attach) Always attach braces to surrounding context.
#    BS_Linux (in configuration: Linux) Like Attach, but break before braces on function, namespace and class definitions.
#    BS_Mozilla (in configuration: Mozilla) Like Attach, but break before braces on enum, function, and record definitions.
#    BS_Stroustrup (in configuration: Stroustrup) Like Attach, but break before function definitions, catch, and else.
#    BS_Allman (in configuration: Allman) Always break before braces.
#    BS_GNU (in configuration: GNU) Always break before braces and add an extra level of indentation to braces of control statements, not to those of class, function or other definitions.
#    BS_WebKit (in configuration: WebKit) Like Attach, but break before functions.
#    BS_Custom (in configuration: Custom) Configure each individual brace in BraceWrapping.
BreakBeforeBraces: Attach

# TODO
# v6.0 BreakBeforeInheritanceComma: false

# If true, ternary operators will be placed after line breaks.
BreakBeforeTernaryOperators: true

# Always break constructor initializers before commas and align the commas with the colon.
# It should false.
# v6.0 BreakConstructorInitializersBeforeComma: false

# TODO
# v6.0 BreakConstructorInitializers: BeforeColon

# Break after each annotation on a field in Java files. 不要求
BreakAfterJavaFieldAnnotations: false

# Allow breaking string literals when formatting. 不要求
BreakStringLiterals: true

# The column limit.
# A column limit of 0 means that there is no column limit. In this case, clang-format will respect
# the input’s line breaking decisions within statements unless they contradict other rules.
# It should be 100.
ColumnLimit:     100

# A regular expression that describes comments with special meaning, which should not be split into
# lines or otherwise changed. 不要求
CommentPragmas:  '^ IWYU pragma:'

# TODO
# v6.0 CompactNamespaces: false

# If the constructor initializers don’t fit on a line, put each initializer on its own line.
ConstructorInitializerAllOnOneLineOrOnePerLine: true

# The number of characters to use for indentation of constructor initializer lists.
# It should be 8.
ConstructorInitializerIndentWidth: 8

# Indent width for line continuations.
ContinuationIndentWidth: 4

# If true, format braced lists as best suited for C++11 braced lists. 不要求
Cpp11BracedListStyle: true

# If true, analyze the formatted file for the most common alignment of & and \*. PointerAlignment is
# then used only as fallback. 
DerivePointerAlignment: true

# Disables formatting completely.
DisableFormat:   false

# If true, clang-format detects whether function calls and definitions are formatted with one
# parameter per line. 不要求
# Each call can be bin-packed, one-per-line or inconclusive. If it is inconclusive, e.g. completely
# on one line, but a decision needs to be made, clang-format analyzes whether there are other
# bin-packed cases in the input file and act accordingly.
# NOTE: This is an experimental flag, that might go away or be renamed. Do not use this in config
# files, etc. Use at your own risk.
ExperimentalAutoDetectBinPacking: false

# TODO 不要求
# v6.0 FixNamespaceComments: true

# A vector of macros that should be interpreted as foreach loops instead of as function calls.
# These are expected to be macros of the form:
# FOREACH(<variable-declaration>, ...)
# <loop-body>
# In the .clang-format configuration file, this can be configured like:
# ForEachMacros: ['RANGES_FOR', 'FOREACH']
# For example: BOOST_FOREACH.
ForEachMacros:   
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH

# TODO
# v6.0 IncludeBlocks:   Preserve

# Regular expressions denoting the different #include categories used for ordering #includes. 不要求
# These regular expressions are matched against the filename of an include (including the <> or "")
# in order. The value belonging to the first matching regular expression is assigned and #includes
# are sorted first according to increasing category number and then alphabetically within each
# category.
# If none of the regular expressions match, INT_MAX is assigned as category. The main header for a
# source file automatically gets category 0. so that it is generally kept at the beginning of the
# #includes (http://llvm.org/docs/CodingStandards.html#include-style). However, you can also assign
# negative priorities if you have certain headers that always need to be first.
# To configure this in the .clang-format file, use:
# IncludeCategories:
#   - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
#     Priority:        2
#   - Regex:           '^(<|"(gtest|isl|json)/)'
#     Priority:        3
#   - Regex:           '.\*'
#     Priority:        1
IncludeCategories: 
  - Regex:           '^<ext/.*\.h>'
    Priority:        2
  - Regex:           '^<.*\.h>'
    Priority:        1
  - Regex:           '^<.*'
    Priority:        2
  - Regex:           '.*'
    Priority:        3

# Specify a regular expression of suffixes that are allowed in the file-to-main-include mapping.
# When guessing whether a #include is the "main" include (to assign category 0, see above), use this
# regex of allowed suffixes to the header stem. A partial match is done, so that: - "" means
# "arbitrary suffix" - "$" means "no suffix".
# For example, if configured to "(_test)?$", then a header a.h would be seen as the "main" include
# in both a.cc and a_test.cc. 不要求
IncludeIsMainRegex: '([-_](test|unittest))?$'

# Indent case labels one level from the switch statement.
# It should be true
IndentCaseLabels: true

# TODO
# v6.0 IndentPPDirectives: None # 6.0

# The number of columns to use for indentation.
# It should be 4.
IndentWidth:     4

# Indent if a function definition or declaration is wrapped after the type. 不要求
IndentWrappedFunctionNames: false

# The JavaScriptQuoteStyle to use for JavaScript strings. 不要求
# Possible values:
#   JSQS_Leave (in configuration: Leave) Leave string quotes as they are.
#   JSQS_Single (in configuration: Single) Always use single quotes.
#   JSQS_Double (in configuration: Double) Always use double quotes.
JavaScriptQuotes: Leave

# TODO 不要求
JavaScriptWrapImports: true

# If true, empty lines at the start of blocks are kept.
KeepEmptyLinesAtTheStartOfBlocks: false

# A regular expression matching macros that start a block. 不要求
MacroBlockBegin: ''

# A regular expression matching macros that end a block. 不要求
MacroBlockEnd:   ''

# The maximum number of consecutive empty lines to keep.
# The default value of Google style is 1.
MaxEmptyLinesToKeep: 3

# The indentation used for namespaces.
# Possible values:
#   NI_None (in configuration: None) Don’t indent in namespaces.
#   NI_Inner (in configuration: Inner) Indent only in inner namespaces (nested in other namespaces).
#   NI_All (in configuration: All) Indent in all namespaces.
NamespaceIndentation: None

# he number of characters to use for indentation of ObjC blocks. 不要求
ObjCBlockIndentWidth: 4

# Add a space after @property in Objective-C, i.e. use @property (readonly) instead of
# @property(readonly). 不要求
ObjCSpaceAfterProperty: false

# Add a space in front of an Objective-C protocol list, i.e. use Foo <Protocol> instead of
# Foo<Protocol>. 不要求
ObjCSpaceBeforeProtocolList: false

# TODO
# v6.0 PenaltyBreakAssignment: 4

# The penalty for breaking a function call after call(. 不要求
PenaltyBreakBeforeFirstCallParameter: 1

# The penalty for each line break introduced inside a comment. 不要求
PenaltyBreakComment: 300

# The penalty for breaking before the first <<. 不要求
PenaltyBreakFirstLessLess: 120

# The penalty for each line break introduced inside a string literal. 不要求
PenaltyBreakString: 1000

# The penalty for each character outside of the column limit. 不要求
PenaltyExcessCharacter: 1000000

# Penalty for putting the return type of a function onto its own line. 不要求
PenaltyReturnTypeOnItsOwnLine: 200

# Pointer and reference alignment style.
# Possible values:
#    PAS_Left (in configuration: Left) Align pointer to the left.
#    PAS_Right (in configuration: Right) Align pointer to the right.
#    PAS_Middle (in configuration: Middle) Align pointer in the middle.
# It should NOT be Middle.
PointerAlignment: Left

# TODO
# v6.0 RawStringFormats: 
# v6.0   - Delimiter:       pb
# v6.0     Language:        TextProto
# v6.0     BasedOnStyle:    google

# If true, clang-format will attempt to re-flow comments.
# 不强制要求，但建议
ReflowComments:  true

# If true, clang-format will sort #includes
# The default value in Google style is true. But it'd better be false.
SortIncludes:    false

# TODO
# v6.0 SortUsingDeclarations: true

# If true, a space may be inserted after C style casts. 不要求
SpaceAfterCStyleCast: false

# If true, a space will be inserted after the ‘template’ keyword. 不要求。
# v6.0 SpaceAfterTemplateKeyword: true

# If false, spaces will be removed before assignment operators.
# It should be true.
SpaceBeforeAssignmentOperators: true

# Defines in which cases to put a space before opening parentheses.
# Possible values:
#   SBPO_Never (in configuration: Never) Never put a space before opening parentheses.
#   SBPO_ControlStatements (in configuration: ControlStatements) Put a space before opening \
#       parentheses only after control statement keywords (for/if/while...). 
#   SBPO_Always (in configuration: Always) Always put a space before opening parentheses, except \
#       when it’s prohibited by the syntax.
# It should be ControlStatements
SpaceBeforeParens: ControlStatements

# If true, spaces may be inserted into (). 不要求
SpaceInEmptyParentheses: false

# The number of spaces before trailing line comments (// - comments). 不要求
SpacesBeforeTrailingComments: 2

# If true, spaces will be inserted after < and before > in template argument lists.
# It should be false.
SpacesInAngles:  false

# If true, spaces are inserted inside container literals (e.g. ObjC and Javascript array and dict
# literals). 不要求。
SpacesInContainerLiterals: true

# If true, spaces may be inserted into C style casts. 不要求
SpacesInCStyleCastParentheses: false

# If true, spaces will be inserted after ( and before ). 不要求。
SpacesInParentheses: false

# If true, spaces will be inserted after [ and before ]. 不要求。
SpacesInSquareBrackets: false

# Format compatible with this standard, e.g. use A<A<int> > instead of A<A<int>> for LS_Cpp03.
# Possible values:
#    LS_Cpp03 (in configuration: Cpp03) Use C++03-compatible syntax.
#    LS_Cpp11 (in configuration: Cpp11) Use features of C++11 (e.g. A<A<int>> instead of A<A<int> >).
#    LS_Auto (in configuration: Auto) Automatic detection based on the input.
Standard:        Auto

# The number of columns used for tab stops.
TabWidth:        4

# The way to use tab characters in the resulting file.
# Possible values:
#    UT_Never (in configuration: Never) Never use tab.
#    UT_ForIndentation (in configuration: ForIndentation) Use tabs only for indentation.
#    UT_Always (in configuration: Always) Use tabs whenever we need to fill whitespace that spans
#    at least from one tab stop to the next one. 
UseTab:          Never
...

